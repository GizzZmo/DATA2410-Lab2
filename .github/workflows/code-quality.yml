name: Code Quality

# This workflow performs comprehensive code quality checks
# It runs on every push and pull request

on:
  push:
  pull_request:

jobs:
  lint:
    name: Linting and Style Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort mypy bandit
    
    - name: Run flake8
      run: |
        echo "Running flake8..."
        flake8 . --max-line-length=120 --exclude=.git,__pycache__,.venv,venv
      continue-on-error: true
    
    - name: Run pylint
      run: |
        echo "Running pylint..."
        pylint *.py --exit-zero
      continue-on-error: true
    
    - name: Check code formatting with Black
      run: |
        echo "Checking code formatting..."
        black --check --line-length=120 .
      continue-on-error: true
    
    - name: Check import order with isort
      run: |
        echo "Checking import order..."
        isort --check-only --profile black .
      continue-on-error: true
    
    - name: Type checking with mypy
      run: |
        echo "Running type checks..."
        mypy *.py --ignore-missing-imports
      continue-on-error: true
    
    - name: Security scan with bandit
      run: |
        echo "Running security scan..."
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety
    
    - name: Check for security vulnerabilities in dependencies
      run: |
        if [ -f requirements.txt ]; then
          safety check --file requirements.txt || true
        else
          echo "No requirements.txt found, skipping dependency check"
        fi
      continue-on-error: true
